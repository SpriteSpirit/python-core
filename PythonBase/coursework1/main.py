import random

# —Å–ø–∏—Å–æ–∫ –∑–∞–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
encoding_word = ["code", "bit", "data_list", "soul", "next", "ice cream", "2023", "skypro"]
answers = []

# –∞–∑–±—É–∫–∞ –ú–æ—Ä–∑–µ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ - —Å–ª–æ–≤–∞—Ä—å)
MORSE = {".": ".-.-.-", ",": "--..--", "?": "..--..",
         "!": "-.-.--", "-": "-....-", "/": "-..-.",
         "@": ".--.-.", "(": "-.--.",  ")": "-.--.-",

         "0": "-----", "1": ".----",
         "2": "..---", "3": "...--",
         "4": "....-", "5": ".....",
         "6": "-....", "7": "--...",
         "8": "---..", "9": "----.",

         "a": ".-",   "b": "-...",
         "c": "-.-.", "d": "-..",
         "e": ".",    "f": "..-.",
         "g": "--.",  "h": "....",
         "i": "..",   "j": ".---",
         "k": "-.-",  "l": ".-..",
         "m": "--",   "n": "-.",
         "o": "---",  "p": ".--.",
         "q": "--.-", "r": ".-.",
         "s": "...",  "t": "-",
         "u": "..-",  "v": "...-",
         "w": ".--",  "x": "-..-",
         "y": "-.--", "z": "--.."}


def morse_encode(word: str, morse_code: str) -> str:
    """
    –ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –∞–∑–±—É–∫–∏ –ú–æ—Ä–∑–µ
    –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å–∞–º–æ–π –∞–∑–±—É–∫–∏
    –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

    :param word: –ø–µ—Ä–µ–¥–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    :param morse_code: –ø–µ—Ä–µ–¥–∞–µ–º —Å–∞–º—É –∞–∑–±—É–∫—É –ú–æ—Ä–∑–µ
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ [–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏]
    """

    result = ""
    for char in word:
        if char.lower() in morse_code:
            result += morse_code[char.lower()] + " "
        elif char.upper() in morse_code:
            result += morse_code[char.lower()] + " "

    return result.strip()


def get_word(words: list) -> str:
    """
      –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
      –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    """

    return random.choice(words)


def print_statistics(total_questions: int, all_answers: list) -> str:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ [–≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤],
    [–≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã] –∏ [–Ω–µ –≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã]

    :param total_questions: –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª-–≤–æ —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤ int –∑–Ω–∞—á–µ–Ω–∏–∏
    :param all_answers: –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: f-—Å—Ç—Ä–æ–∫—É
    """

    return (f"\n"
            f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á–µ–∫: {total_questions}\n"
            f"–û—Ç–≤–µ—á–µ–Ω–æ –≤–µ—Ä–Ω–æ: {all_answers.count(True)}\n"
            f"–û—Ç–≤–µ—á–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ: {all_answers.count(False)}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n(„ÄÉÔø£Ô∏∂Ôø£)‰∫∫(Ôø£Ô∏∂Ôø£„ÄÉ)")


def play():
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∏
    —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞
    —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä times (—Ä–∞–∑).

    If –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
    –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω–æ-–≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    –ò –ø–æ–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –±—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∏–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤.

    –ò–≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª-–≤–æ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –æ—Ç–∫–∞–∂–µ—Ç—Å—è, —Ç–æ –ø—Ä–æ—â–∞–µ–º—Å—è.
    """

    print("–°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –º–æ—Ä–∑—è–Ω–∫—É.")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –∏ –Ω–∞—á–Ω–µ–º...")

    times = input("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å?\n")

    if times is None or times == "0" or times == "":
        times = 1
        print(f"–ú—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—ã–≥—Ä–∞–µ–º {times} —Ä–∞–∑ üëæ")
        user_reaction = input("–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å? ")

        if user_reaction.replace(" ", "").lower() == "–Ω–µ—Ç" or \
                user_reaction.replace(" ","").lower() == "no" or \
                user_reaction.replace(" ", "") == "":
            print("–ñ–∞–ª—å! –ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞. ü•∫")
            return

    print("–û—Ç–ª–∏—á–Ω–æ! –ü–æ–µ—Ö–∞–ª–∏! ü§ì\n")

    times = int(times)

    for i in range(times):
        word = get_word(encoding_word)
        morse_code = morse_encode(word, MORSE)
        # print(f"hint: {word}")
        # print(f"hint: {morse_code}")

        if i == 0:
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞:")

        print(f"–°–ª–æ–≤–æ {i + 1} : {morse_code}\n")

        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")
        user_word = input().strip()

        if user_word.replace(" ", "").lower() == word.replace(" ", "").lower():
            print(f"\n–ü—Ä–æ–≥—Ä–∞–º–º–∞:\n–í–µ—Ä–Ω–æ, {word}!")
            answers.append(True)
        else:
            print(f"\n–ü—Ä–æ–≥—Ä–∞–º–º–∞:\n–ù–µ –≤–µ—Ä–Ω–æ, {word}!")
            answers.append(False)

    # –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(print_statistics(times, answers))


# –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
play()