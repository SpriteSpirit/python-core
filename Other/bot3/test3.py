import telebot
from telebot import types
import json

ITEMS_PER_PAGE = 4
TOKEN = "7498576649:AAH1bU_NZP4HoJLw_w0eswBWEwJBRLjFmEg"

user_data = {}

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=["start"])
def handle_start(message):
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup=handle_selection())


@bot.message_handler(commands=["add_info"])
def handle_add_info(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    bot.register_next_step_handler(msg, get_user_name)


def get_user_name(message):
    chat_id = message.chat.id
    user_data[chat_id]["name"] = message.text
    msg = bot.send_message(chat_id, "–í–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    bot.register_next_step_handler(msg, callback=get_user_phone)


def get_user_phone(message):
    chat_id = message.chat.id
    user_data[chat_id]["phone"] = message.text
    add_client(message, user_data[chat_id]["name"], user_data[chat_id]["phone"])
    bot.send_message(chat_id,
                     f"–í–∞—à–µ –∏–º—è {user_data[chat_id]['name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user_data[chat_id]['phone']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω ")


def add_client(message, client_name, client_phone):
    try:
        # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª –∏ —á—Ç–µ–Ω–∏—è
        with open("data.json", "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {"clients": []}
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ "clients"
    new_client = {"id": str(message.chat.id), "name": client_name, "phone": client_phone, "cart": []}

    for client in data["clients"]:
        if client.get("id") == str(message.chat.id):
            client["name"] = client_name
            client["phone"] = client_phone
            break
    else:
        data["clients"].append(new_client)

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª json –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


def handle_selection():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    button1 = types.KeyboardButton("–ú–µ–Ω—é ü•©")
    button2 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞ üõí")
    button3 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üëõ")

    keyboard.add(button1, button2, button3)
    return keyboard


dishes = [
    {"name": "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø", "price": "450 —Ä—É–±.", "photo": "mushroom_soup.png"},
    {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": "550 —Ä—É–±.", "photo": "caesar.png"},
    {"name": "–£—Ç–∫–∞ —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "price": "700 —Ä—É–±.", "photo": "duck_orange.png"},
    {"name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "price": "650 —Ä—É–±.", "photo": "stroganoff.png"},
    {"name": "–†–∏–∑–æ—Ç—Ç–æ", "price": "500 —Ä—É–±.", "photo": "risotto.png"},
    {"name": "–¢–∏—Ä–∞–º–∏—Å—É", "price": "400 —Ä—É–±.", "photo": "tiramisu.png"},
    {"name": "–ë–ª–∏–Ω—ã", "price": "300 —Ä—É–±.", "photo": "pancakes.png"},
    {"name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "price": "550 —Ä—É–±.", "photo": "carbonara.png"},
    {"name": "–ì–∞—Å–ø–∞—á–æ", "price": "350 —Ä—É–±.", "photo": "gazpacho.png"},
    {"name": "–§–∞–ª–∞—Ñ–µ–ª—å", "price": "400 —Ä—É–±.", "photo": "falafel.png"}

]


def generate_menu(page=0):  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 0 —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE

    keyboard = types.InlineKeyboardMarkup()

    for dish in dishes[start_index:end_index]:  # –æ—Ç 0 –¥–æ 4
        button = types.InlineKeyboardButton(text=f"{dish['name']}: {dish['price']}",
                                            callback_data=f"dish_{dishes.index(dish)}")
        keyboard.add(button)

    # –†–ê–ó–û–ë–†–ê–¢–¨–°–Ø –ó–î–ï–°–¨
    if page > 0:
        keyboard.add(types.InlineKeyboardButton(text="<<", callback_data=f"page_{page - 1}"))
    if end_index < len(dishes):
        keyboard.add(types.InlineKeyboardButton(text=">>", callback_data=f"page_{page + 1}"))

    return keyboard


def generate_cart(client_id):
    items_cart = get_cart(client_id)  # —Å–ª–æ–≤–∞—Ä—å
    keyboard = types.InlineKeyboardMarkup()
    # print(items_cart)

    for item in items_cart:
        minus_button = types.InlineKeyboardButton(text="-", callback_data=f"minus_{item}")
        plus_button = types.InlineKeyboardButton(text="+", callback_data=f"plus_{item}")
        name_button = types.InlineKeyboardButton(text=f"{item[0]} x {item[1]}", callback_data=f"name_{item}")

        keyboard.add(minus_button, name_button, plus_button)

    bot.send_message(client_id, "–ö–æ—Ä–∑–∏–Ω–∞", reply_markup=keyboard)


def get_cart(client_id):
    with open("data.json", "r", encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            return client.get("cart", [])
    return None


# –ü–†–û–í–ï–†–ò–¢–¨
def add_to_cart(client_id, item):
    with open("data.json", "r", encoding="utf-8") as file:
        cart = json.load(file)

    clients = cart.get("clients", [])

    for client in clients:
        if client.get("id") == str(client_id):
            for cart_item in client["cart"]:
                if cart_item[0] == item['name']:
                    cart_item[1] += 1
                    break
            else:
                client["cart"].append([item['name'], 1])

    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(cart, file, ensure_ascii=False, indent=4)


# –ü–†–û–í–ï–†–ò–¢–¨
def delete_to_cart(client_id, item):
    with open('data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    clients = data.get("clients", [])

    for client in clients:
        if client.get("id") == str(client_id):
            for cart_item in client["cart"]:
                if cart_item[0] == item['name']:
                    if cart_item[1] > 0:
                        cart_item[1] -= 1
                        print(f"–ü–æ–∑–∏—Ü–∏—è '{cart_item}' —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ –æ–¥–∏–Ω")
                        if cart_item[1] == 0:
                            client["cart"].remove(cart_item)
                            print(f"–ü–æ–∑–∏—Ü–∏—è '{cart_item}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


# –†–ê–ó–û–ë–†–ê–¢–¨–°–Ø –ó–î–ï–°–¨
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    chat_id = call.message.chat.id

    if call.data.startswith("page_"):
        text, page = call.data.split("_")
        print(text, page)
        keyboard = generate_menu(int(page))
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard)

    elif call.data.startswith("dish_"):
        text, dish_index = call.data.split("_")
        bot.send_message(chat_id, text=f"–ë–ª—é–¥–æ {dishes[int(dish_index)]['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑",
                         reply_markup=generate_menu())
        add_to_cart(chat_id, dishes[int(dish_index)])

    elif call.data.startswith("plus_"):
        text, item = call.data.split("_")
        item = item.replace("'", '')
        item_list = item[1:-1].split(",")

        for dish in dishes:
            if dish['name'] == item_list[0]:
                add_to_cart(chat_id, dish)
                bot.send_message(chat_id, text=f"–ë–ª—é–¥–æ {dish['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑...",
                                 reply_markup=generate_cart(chat_id))

    elif call.data.startswith("minus_"):
        text, item = call.data.split("_")
        item = item.replace("'", '')
        item_list = item[1:-1].split(",")

        for dish in dishes:
            # print(dish)
            if dish['name'] == item_list[0]:
                delete_to_cart(chat_id, dish)
                bot.send_message(chat_id, text=f"–ë–ª—é–¥–æ {dish['name']} —É–±—Ä–∞–Ω–æ –∏–∑ –∑–∞–∫–∞–∑–∞...",
                                 reply_markup=generate_cart(chat_id))


@bot.message_handler(func=lambda message: True)
def handle_all(message):
    if message.text == "–ú–µ–Ω—é ü•©":
        bot.send_message(message.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: ", reply_markup=generate_menu())
    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞ üõí":
        generate_cart(message.chat.id)
    elif message.text == "–ó–∞–∫–∞–∑–∞—Ç—å üëõ":
        bot.send_message(message.chat.id, "/ ")


if __name__ == "__main__":
    bot.polling(non_stop=True)