import ast

import telebot
from telebot import types
import json

ITEMS_PER_PAGE = 4
TOKEN = "7498576649:AAH1bU_NZP4HoJLw_w0eswBWEwJBRLjFmEg"

user_data = {}

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=["start"])
def handle_start(message):
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup=handle_selection())


# –ö–æ–º–∞–Ω–¥–∞ /add_info
@bot.message_handler(commands=['add_info'])
def add_info(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(msg, process_name_step)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
def process_name_step(message):
    chat_id = message.chat.id
    user_data[chat_id]['name'] = message.text
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(msg, process_phone_step)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def process_phone_step(message):
    chat_id = message.chat.id
    user_data[chat_id]['phone'] = message.text
    bot.send_message(chat_id,
                     f"–í–∞—à–µ –∏–º—è: {user_data[chat_id]['name']}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data[chat_id]['phone']}")
    save_client(message, user_data[chat_id]['name'], user_data[chat_id]['phone'])


def save_client(message, client_name, client_phone):
    try:
        # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª –∏ —á—Ç–µ–Ω–∏—è
        with open("data.json", "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {"clients": []}
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ "id"
    new_client = {"id": str(message.chat.id), "name": client_name, "phone": client_phone, "cart": []}

    # data["clients"].append([str(message.chat.id)] = message.text)
    for client in data['clients']:
        if client.get('id') == str(message.chat.id):
            client['name'] = client_name
            client['phone'] = client_phone
            # client['cart'] = []
            break
    else:
        data['clients'].append(new_client)

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª json –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

    bot.send_message(message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


menu_items = [
    {"name": "–ì—Ä–∏–±–Ω–æ–π —Å—É–ø", "price": "450 —Ä—É–±.", "photo": "mushroom_soup.png"},
    {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": "550 —Ä—É–±.", "photo": "caesar.png"},
    {"name": "–£—Ç–∫–∞ —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "price": "700 —Ä—É–±.", "photo": "duck_orange.png"},
    {"name": "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "price": "650 —Ä—É–±.", "photo": "stroganoff.png"},
    {"name": "–†–∏–∑–æ—Ç—Ç–æ", "price": "500 —Ä—É–±.", "photo": "risotto.png"},
    {"name": "–¢–∏—Ä–∞–º–∏—Å—É", "price": "400 —Ä—É–±.", "photo": "tiramisu.png"},
    {"name": "–ë–ª–∏–Ω—ã", "price": "300 —Ä—É–±.", "photo": "pancakes.png"},
    {"name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "price": "550 —Ä—É–±.", "photo": "carbonara.png"},
    {"name": "–ì–∞—Å–ø–∞—á–æ", "price": "350 —Ä—É–±.", "photo": "gazpacho.png"},
    {"name": "–§–∞–ª–∞—Ñ–µ–ª—å", "price": "400 —Ä—É–±.", "photo": "falafel.png"}

]


# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_markup(page=0):
    # print('generate_markup')
    markup = types.InlineKeyboardMarkup()
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE

    for item in menu_items[start_index:end_index]:
        button = types.InlineKeyboardButton(f'{item["name"]}: {item["price"]}',
                                            callback_data=f"item_{menu_items.index(item)}")
        markup.add(button)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        markup.add(types.InlineKeyboardButton(text="<<", callback_data=f'page_{page - 1}'))
    if end_index < len(menu_items):
        markup.add(types.InlineKeyboardButton(text=">>", callback_data=f'page_{page + 1}'))

    return markup


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    # print('echo_all')
    if message.text == "–ú–µ–Ω—é ü•©":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=generate_markup())

    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞ üõí":
        items_in_cart = get_cart(message.chat.id)
        markup = types.InlineKeyboardMarkup()

        for item in items_in_cart:
            minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item}")
            name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
            plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item}")

            markup.add(minus_button, name_button, plus_button)

        bot.send_message(message.chat.id, '–ö–æ—Ä–∑–∏–Ω–∞:', reply_markup=markup)

    elif message.text == "–ó–∞–∫–∞–∑–∞—Ç—å üõçÔ∏è":
        items_in_cart = get_cart(message.chat.id)
        markup = types.InlineKeyboardMarkup()
        sum_items = 0

        for item in items_in_cart:
            name_button = types.InlineKeyboardButton(f"{item[0]}: {item[1]}—à—Ç. x {item[2]} ‚ÇΩ", callback_data=f"name_{item}")
            markup.add(name_button)

            sum_items += item[1] * item[2]

        sum_button = types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å',
                                                callback_data=f"sum_{sum_items}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É markup
        if sum_items != 0:
            markup.add(sum_button)
            bot.send_message(message.chat.id, f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {sum_items} ‚ÇΩ', reply_markup=markup)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
def get_cart(client_id):
    with open("data.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])

    for client in clients:
        if client.get("id") == str(client_id):
            return client.get("cart", [])

    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω


# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
def update_cart(chat_id):
    items_in_cart = get_cart(chat_id)

    markup = types.InlineKeyboardMarkup()

    for item in items_in_cart:
        minus_button = types.InlineKeyboardButton("-", callback_data=f"minus_{item}")
        name_button = types.InlineKeyboardButton(f"{item[0]} x{item[1]}", callback_data=f"name_{item}")
        plus_button = types.InlineKeyboardButton("+", callback_data=f"plus_{item}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É markup
        markup.add(minus_button, name_button, plus_button)

    return markup


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
def add_to_cart(client_id, item):
    with open("../bot3/data.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])

    for client in clients:
        if client.get("id") == str(client_id):
            for cart_item in client["cart"]:
                # print(type(cart_item[0]))
                print(cart_item)
                if cart_item[0] == item['name']:
                    cart_item[1] += 1
                    # cart_item[2] *= cart_item[1]
                    break
            else:
                client["cart"].append([item['name'], 1, int(item['price'].split()[0])])
    # print(data['clients'][1]['cart'])

    with open("../bot3/data.json", 'w', encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


# —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
def delete_from_cart(client_id, item):
    with open("../bot3/data.json", 'r', encoding="utf-8") as file:
        data = json.load(file)

    clients = data.get("clients", [])
    for client in clients:
        if client.get("id") == str(client_id):
            for cart_item in client["cart"]:
                if cart_item[0] == item:
                    cart_item[1] -= 1
                    # cart_item[2] *= cart_item[1]
                    # print(cart_item[1])

                    if cart_item[1] == 0:
                        client["cart"].remove(cart_item)

                    break
        # print(data['clients'][1]['cart'])

    with open("../bot3/data.json", 'w', encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    # print('query_handler')
    bot.answer_callback_query(call.id)
    chat_id = call.message.chat.id

    if call.data.startswith('page_'):
        _, page = call.data.split('_')
        markup = generate_markup(int(page))

        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:",
                              reply_markup=markup)
    elif call.data.startswith('item_'):
        _, item_index = call.data.split('_')
        msg = bot.send_message(call.message.chat.id,
                               f'{menu_items[int(item_index)]["name"]} –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                               reply_markup=generate_markup())

        bot.delete_message(chat_id, msg.message_id - 1)
        add_to_cart(chat_id, menu_items[int(item_index)])
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '+', –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif call.data.startswith('plus_'):
        _, item = call.data.split('_', 1)
        item = ast.literal_eval(item)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        add_to_cart(chat_id, item[0])

        msg = bot.send_message(chat_id, "–ö–æ—Ä–∑–∏–Ω–∞:", reply_markup=update_cart(chat_id))
        bot.delete_message(chat_id, msg.message_id - 1)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '-', –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif call.data.startswith('minus_'):
        _, item = call.data.split('_')
        item = ast.literal_eval(item)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        delete_from_cart(chat_id, item[0])

        msg = bot.send_message(chat_id, "–ö–æ—Ä–∑–∏–Ω–∞:", reply_markup=update_cart(chat_id))
        bot.delete_message(chat_id, msg.message_id - 1)

    elif call.data.startswith('sum_'):
        _, sum = call.data.split('_')
        # print(type(sum), sum)

        bot.send_message(chat_id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')


def handle_selection():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    button1 = types.KeyboardButton("–ú–µ–Ω—é ü•©")
    button2 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞ üõí")
    button3 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üõçÔ∏è")

    keyboard.add(button1, button2, button3)
    return keyboard


if __name__ == "__main__":
    bot.polling(non_stop=True)
